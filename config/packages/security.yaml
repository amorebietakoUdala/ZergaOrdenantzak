security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    password_hashers:
        AMREU\UserBundle\Model\UserInterface: bcrypt
        legacy:
            algorithm: sodium

        App\Entity\User:
            algorithm: bcrypt
            migrate_from: 
                - legacy
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    providers:
        # fos_userbundle:
        #     id: fos_user.user_provider.username

        amreu_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            pattern: ^/
            guard:
                authenticators:
                    - amreu.login.form.authenticator
                entry_point: amreu.login.form.authenticator
            form_login:
#                use_referer: true
                provider: amreu_user_provider
                # provider: fos_userbundle
                csrf_token_generator: security.csrf.token_manager
                # if you are using Symfony < 2.8, use the following config instead:
                # csrf_provider: form.csrf_provider
                default_target_path: admin_ordenantza_index
                always_use_default_target_path: true

            logout:
                path:   /logout
                target: /login
            switch_user:
                provider: amreu_user_provider
                role: ROLE_SUPER_ADMIN

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/[0-9][0-9][0-9][0-9]?[0-9]?/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/(eu|es)/, role: [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/admin/user, role: [ROLE_ADMIN] }
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_USER] }